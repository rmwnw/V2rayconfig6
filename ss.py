Rmwnw, [8/25/2025 2:30 AM]
import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from collections import defaultdict
from datetime import time
import logging

# ??????? ???
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(name)

# ???? ???? - ?? ????? ????? ????????
TOKEN = os.getenv("BOT_TOKEN", "8267909544:AAG1Rr4QWUQLbjTcrnXkFxO7veOPFgWDgfQ")

# ??????? ????
referrals = defaultdict(list)
rewarded_users = set()

# ???? ???????
daily_contents = [
    "?? ????? ?? ?????? ??? ?????? ????? ????!",
    "?? ??? ????? ?? ??? ?? ?????? ???? ????!",
    "?? ?? ???????? ???? ???? ?? ??? ?? ???? ?? ?? ?? ??????!",
    "?? ???? ?????? ????? ???! ??? ????? ?? ??? ?? ???? ???!"
]

# ?????? ??? ????? ???? ???
EMOJIS = ["?", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "?"]

def get_random_emoji():
    return random.choice(EMOJIS)

def load_contents():
    """??? ???? ????? ?? ???? ?? ??????? ?? ??? ???"""
    try:
        with open('contents.txt', 'r', encoding='utf-8') as f:
            contents = [line.strip() for line in f if line.strip()]
            if contents:
                return contents
    except FileNotFoundError:
        pass
    return daily_contents

async def scheduled_content_update(context: ContextTypes.DEFAULT_TYPE):
    """????????? ????? ?? ???????? ????"""
    global daily_contents
    daily_contents = load_contents()
    logger.info("???????? ??? ?? ??? ????!")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    args = context.args
    
    emoji = get_random_emoji()
    
    # ??? ????? ?? ???? ?????? ???? ???
    if args:
        try:
            referrer_id = int(args[0])
            if user_id != referrer_id and user_id not in referrals[referrer_id]:
                referrals[referrer_id].append(user_id)
                
                # ????? ?? ???? ?????
                try:
                    count = len(referrals[referrer_id])
                    emoji2 = get_random_emoji()
                    await context.bot.send_message(
                        referrer_id, 
                        f"{emoji2} ?? ???? ???? ?? ???? ?? ??? ??! {emoji2}\n\n"
                        f"?? ???? {count} ??? ?? ???? ?? ??? ???!\n"
                        f"??? {max(0, 2 - count)} ??? ???? ???? ???? ?? ????? ?????? ???? ?? ?????!"
                    )
                except Exception as e:
                    logger.error(f"??? ?? ????? ???? ?? ???? ?????: {e}")
        except ValueError:
            pass  # ??? args ??????? ???? ?? ??

    # ???? ???? ???????
    referral_link = f"https://t.me/{context.bot.username}?start={user_id}"
    
    count = len(referrals[user_id])
    has_reward = user_id in rewarded_users
    
    # ????? ?????? ???
    keyboard = [
        [InlineKeyboardButton(f"{get_random_emoji()} ???? ?? ?????? {get_random_emoji()}", url=f"https://t.me/share/url?url={referral_link}&text=?? ??? ??? ????? ????????!")],
        [InlineKeyboardButton(f"{get_random_emoji()} ????? ????? {get_random_emoji()}", callback_data="status")],
        [InlineKeyboardButton(f"{get_random_emoji()} ?????? ????? {get_random_emoji()}", callback_data="get_content")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # ???? ??? ??????? ?? ?????? ?????
    welcome_msg = (
        f"{emoji} ???? {user.first_name} ????! {emoji}\n\n"
        f"??? ????? ?? ??? ?????? ???? ??! ????? ?????? ?????? exclusive ?????? ???.\n\n"
        f"?? ???? ?????? ?????? ????? ??? ????? ? ?? ?? ?????? ?? ???? ???!\n\n"

Rmwnw, [8/25/2025 2:30 AM]
f"?? ???? ???? ??:\n{referral_link}\n\n"
        f"?? ?? ???? {count} ??? ?? ???? ?? ??? ???!\n"
    )
    
    if has_reward:
        welcome_msg += f"? ?? ????? ?????? ???? ?? ?? ?????? ????!\n\n"
    else:
        welcome_msg += f"?? {max(0, 2 - count)} ??? ???? ???? ???? ?? ????? ?????? ???? ?? ?????!\n\n"
        
    welcome_msg += f"?? ?? ??? ?? ?????? ???? ???? ?????!"
    
    await update.message.reply_text(welcome_msg, reply_markup=reply_markup, parse_mode='Markdown')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    count = len(referrals[user_id])
    has_reward = user_id in rewarded_users
    
    await query.answer()
    
    if query.data == "status":
        emoji = get_random_emoji()
        status_msg = (
            f"{emoji} ????? ?? {emoji}\n\n"
            f"?? ????? ???? ??????: {count} ???\n"
        )
        
        if has_reward:
            status_msg += f"? ????? ?????? ???? ?? ?????? ????!\n\n"
            status_msg += f"?? ?????? ???? ?? ???? ?????? ????? ??????? ???!"
        else:
            status_msg += f"?? {max(0, 2 - count)} ??? ???? ???? ????!\n\n"
            status_msg += f"?? ???? ???? ??:\nhttps://t.me/{context.bot.username}?start={user_id}"
        
        keyboard = [[InlineKeyboardButton(f"{get_random_emoji()} ????? {get_random_emoji()}", callback_data="back")]]
        await query.edit_message_text(status_msg, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    elif query.data == "get_content":
        if has_reward or count >= 2:
            if not has_reward:
                rewarded_users.add(user_id)
            
            # ?????? ?? ?????? ?????
            content = random.choice(daily_contents)
            emoji1, emoji2 = get_random_emoji(), get_random_emoji()
            
            content_msg = (
                f"{emoji1} ?????! ???? ?????? ???? ????? ???? {emoji2}\n\n"
                f"{content}\n\n"
                f"? ?? ????? ?? ?????? ?? ???? ????? ???????!"
            )
            
            keyboard = [[InlineKeyboardButton(f"{get_random_emoji()} ???? ?? ?????? ????? {get_random_emoji()}", callback_data="invite_more")]]
            await query.edit_message_text(content_msg, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            emoji = get_random_emoji()
            error_msg = (
                f"{emoji} ???? ?? ?????? ??????! {emoji}\n\n"
                f"?? ????? ???? ??????? ??: {count} ???\n"
                f"?? {2 - count} ??? ???? ???? ????!\n\n"
                f"?? ???? ???? ??:\nhttps://t.me/{context.bot.username}?start={user_id}"
            )
            
            keyboard = [[InlineKeyboardButton(f"{get_random_emoji()} ???? ?? ?????? {get_random_emoji()}", url=f"https://t.me/share/url?url=https://t.me/{context.bot.username}?start={user_id}&text=?? ??? ??? ????? ????????!")]]
            await query.edit_message_text(error_msg, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    elif query.data == "back":
        referral_link = f"https://t.me/{context.bot.username}?start={user_id}"
        emoji = get_random_emoji()
        
        keyboard = [
            [InlineKeyboardButton(f"{get_random_emoji()} ???? ?? ?????? {get_random_emoji()}", url=f"https://t.me/share/url?url={referral_link}&text=?? ??? ??? ????? ????????!")],
            [InlineKeyboardButton(f"{get_random_emoji()} ????? ????? {get_random_emoji()}", callback_data="status")],
            [InlineKeyboardButton(f"{get_random_emoji()} ?????? ????? {get_random_emoji()}", callback_data="get_content")]
        ]
        
        welcome_msg = (
            f"{emoji} ???? {query.from_user.first_name} ????! {emoji}\n\n"

f"??? ????? ?? ??? ?????? ???? ??!\n\n"
            f"?? ?? ???? {count} ??? ?? ???? ?? ??? ???!\n"
        )
        
        if has_reward:
            welcome_msg += f"? ?? ????? ?????? ???? ?? ?? ?????? ????!\n\n"
        else:
            welcome_msg += f"?? {max(0, 2 - count)} ??? ???? ???? ????!\n\n"
            
        welcome_msg += f"?? ?? ??? ?? ?????? ???? ???? ?????!"
        
        await query.edit_message_text(welcome_msg, reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif query.data == "invite_more":
        referral_link = f"https://t.me/{context.bot.username}?start={user_id}"
        emoji = get_random_emoji()
        
        invite_msg = (
            f"{emoji} ?? ???? ??????? ?????? ?????? ?? ??? ?????? ???? ?????! {emoji}\n\n"
            f"?? ???? ???? ??:\n{referral_link}\n\n"
            f"?? ?? ???? {count} ??? ?? ???? ?? ??? ???!"
        )
        
        keyboard = [
            [InlineKeyboardButton(f"{get_random_emoji()} ???? ?? ?????? {get_random_emoji()}", url=f"https://t.me/share/url?url={referral_link}&text=?? ??? ??? ???al ????????!")],
            [InlineKeyboardButton(f"{get_random_emoji()} ????? {get_random_emoji()}", callback_data="back")]
        ]
        
        await query.edit_message_text(invite_msg, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    emoji = get_random_emoji()
    help_msg = (
        f"{emoji} ??????? ??? {emoji}\n\n"
        f"?? ???? ?????? ?????? ????? ???? ? ??? ?? ?? ???? ????? ??? ???\n"
        f"?? ?? ??? ?? ?????? ???? ????? ????\n"
        f"?? ??? ?? ?????? ?????? ?????? ?????? ??????? ?? ???? ???\n"
        f"?? ?? ?? ???? ????? ?? ?????? ??? ????? ?? ?????? ???? ?????? ???? ???\n\n"
        f"?? ?? ????? ????? ?????? ?? ?? ?????!"
    )
    await update.message.reply_text(help_msg)

async def post_init(application: Application):
    """????? job ???? ?? ???????? ????? ?? ???????? ????"""
    job_queue = application.job_queue
    
    # ????? ???? ?? ???????? ????? ?? ???? ? ??? ? ? ??
    job_queue.run_daily(scheduled_content_update, time(hour=8, minute=0))
    job_queue.run_daily(scheduled_content_update, time(hour=20, minute=0))
    
    # ?????? ?? ??? ????? ??? ?????? ??????? ?? ??? ??????
    await scheduled_content_update(None)

def main():
    # ????? ????????
    application = Application.builder().token(TOKEN).post_init(post_init).build()
    
    # ????? ???? ???????
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # ???? ????
    application.run_polling()
    logger.info("???? ???? ?? ??? ???!")

if name == "main":
    main()	